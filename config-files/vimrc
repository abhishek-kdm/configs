"" Plug plugin installation
call plug#begin('~/.vim/bundle')

Plug 'vim-airline/vim-airline'
Plug 'scrooloose/nerdtree'
Plug 'kien/ctrlp.vim'
Plug 'airblade/vim-gitgutter'
Plug 'shougo/neocomplete.vim'
Plug 'jakwings/vim-colors'
Plug 'tpope/vim-fugitive'
Plug 'leafgarland/typescript-vim'

call plug#end()
"" /Plug plugin Installation.

syntax on
filetype plugin indent on
set colorcolumn=80 "" wrap indicator
set number "" line number.
set mouse=a "" mouse click navigation
set encoding=utf-8
set incsearch "" highlight search as you type.
set hlsearch "" highlight all occurences of word after search.

set fileformat=unix  "" EOL>> <LF> LINE FEED
set et ts=2 sw=2 softtabstop=0 "" et (use tabs [\t]), ts (tabstop [tab size]), sw (shiftwidth [no of tabs])

"" set smarttab
set list listchars=eol:^,tab:\ \ 
color moody

"" NO SWAP AND BACKUP FILES
set nobackup
set nowritebackup
set noswapfile
set noundofile

"" COLOR SCHEME
set t_Co=256  "" 256 COLOR

"" airline
let g:airline_powerline_fonts=1
let g:airline#extensions#branch#enabled = 1

"" git gutter settings
set updatetime=100 " in ms

"" CTRL-P FILE MANAGER
" CtrlP REMAP TO ctrl+p
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" CTRLP IGNORE UNECESSARY FILES
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows


"" TAB COMPLETION IF LINE NOT EMPTY (CTRL+N)
"  CLEVER TAB
"" function! CleverTab()
""   if strpart( getline('.'), 0, col('.')-1 ) =~ '^\s*$'
""     return "\<Tab>"
""   else
""     return "\<C-N>"
""   endif
"" endfunction
"" inoremap <Tab> <CR>=CleverTab()<CR>

"" Default Neocomplete config

" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"


" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

"" CPP SYNTAX HIGHLIGHTING
let g:cpp_class_scope_highlight = 1
let g:cpp_experimental_template_highlight = 1

"" HASKELL AND CABAL SYNTAX HIGLIGHTLING
let g:haskell_enable_quantification = 1 " to enable highlighting of forall
let g:haskell_enable_recursivedo = 1 " to enable highlighting of mdo and rec
let g:haskell_enable_arrowsyntax = 1 " to enable highlighting of proc
let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of pattern
let g:haskell_enable_typeroles = 1 " to enable highlighting of type roles
let g:haskell_enable_static_pointers = 1 " to enable highlighting of static

"" Build systems.
autocmd FileType python nmap <buffer> <F5> :w<bar>!python3 %<CR>
autocmd FileType ruby nmap <buffer> <F5> :w<bar>!ruby %<CR>
autocmd FileType haskell nmap <buffer> <F5> :w<bar>!runhaskell %<CR>
autocmd FileType lisp nmap <buffer> <F5> :w<bar>!clisp %<CR>
autocmd FileType cpp nmap <buffer> <F5> :w<bar>!g++ -std=c++11 -o %:r % && ./%:r<CR>
autocmd FileType c nmap <buffer> <F5> :w<bar>!gcc -o %:r % && %:r<CR>
autocmd FileType go nmap <buffer> <F5> :w<bar>!go run %<CR>
autocmd FileType java nmap <buffer> <F5> :w<bar>!javac % && java %:r<CR>
autocmd FileType javascript nmap <buffer> <F5> :w<bar>!node %<CR>

"" Tab navigation
map <C-w><C-t> :tabnew<CR>

"" TOGGLE TREE >> ctrl+n
map <C-n> :NERDTreeToggle<CR>

"" close vim if nerdtree is the only window left open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('cpp', 'green', 'none', '#990099', '#202020')
call NERDTreeHighlightFile('php', 'yellow', 'none', 'yellow', '#202020')
call NERDTreeHighlightFile('hs', 'blue', 'none', '#a0a0a0', '#202020')
call NERDTreeHighlightFile('txt', 'yellow', 'none', 'yellow', '#202020')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#202020')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#202020')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#202020')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#202020')
call NERDTreeHighlightFile('go', 'lightblue', 'none', 'lightblue', '#202020')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'red', '#202020')
call NERDTreeHighlightFile('py', 'Red', 'none', '#ffa500', '#202020')
call NERDTreeHighlightFile('pyc', 'Red', 'none', '#99ff33', '#202020')
call NERDTreeHighlightFile('js', 'Red', 'none', '#6666ff', '#202020')
call NERDTreeHighlightFile('java', 'Magenta', 'none', '#ff99ff', '#202020')

"" NAVIGATION-ARROWS 
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

"" SET FONT
if has("gui_running")
  "" underscore cursor
  set guicursor+=i:hor20-Cursor/lCursor

  "" --FOR gVim (WINDOWS) ONLY --
  "" ctrl+F1 TOGGLE MEBUBAR
  nnoremap <C-F1> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<CR>

  set go-=T  "" REMOVES TOOLBAR
  set go-=r  "" REMOVES RIGHT SCROLLBAR
  set go-=L  "" REMOVES LEFT SCROLLBAR
  set go-=m  "" REMOVES MENUBAR
  color moody
  let g:indentLine_enabled=1

  if has("gui_win32")
    set guifont=Lucida\ Console:h10:cANSI
  elseif has("gui_gtk+")
    set guifont=Inconsolata\ 10
  endif
endif
