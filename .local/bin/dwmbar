# vim: ft=sh

DWM_CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/dwm"
mkdir -p "$DWM_CACHE_DIR"
trap "rm -rf $DWM_CACHE_DIR" EXIT

echo "$$" > "$DWM_CACHE_DIR"/pidof_dwm_statusbar
trap "DISPLAY_BAR" RTMIN+1

# constants.
batsym=(               )
batsymlen=${#batsym[@]}

NETWORK() {
  ACTIVE_INTERFACE=$(ip link | awk '/state\sUP/ {print substr($2,0,length($2)-1)}')
  [ -z "$ACTIVE_INTERFACE" ] && return 0

  prev_bytes="$DWM_CACHE_DIR"/network_bytes
  [ ! -f "$prev_bytes" ] && echo "0 0" > "$prev_bytes"

  read prx ptx < "$prev_bytes"
  rx="$(</sys/class/net/"$ACTIVE_INTERFACE"/statistics/rx_bytes)"
  tx="$(</sys/class/net/"$ACTIVE_INTERFACE"/statistics/tx_bytes)"

  echo "$rx $tx" > "$prev_bytes"

  echo "$ACTIVE_INTERFACE:  $(( (rx-prx) / 1024 )) KiB/s  $(( (tx-ptx) / 1024 )) KiB/s"
}

CPU() {
  prev_data="$DWM_CACHE_DIR"/cpu_data
  [ ! -f "$prev_data" ] && echo "0 0 0 0 0 0 0" > "$prev_data"

  read puser pnice psystem pidle piowait pirq psoftirq < "$prev_data"
  read user nnice system idle iowait irq softirq <<< $(head -n1 /proc/stat | cut -d\  -f3-9)

  newtotal=$(( user + nnice + system + idle + iowait + irq + softirq ))
  prevtotal=$(( puser + pnice + psystem + pidle + piowait + pirq + psoftirq ))
  total=$(( newtotal - prevtotal ))

  used=$(( (user + nnice + system) - (puser + pnice + psystem) ))
  echo "$user $nnice $system $idle $iowait $irq $softirq" > "$prev_data"

  printf "  %3s%%" $(( 100 * used / total ))
}

MEM() {
  free | awk '
    /Mem/ { c = ($3 + $5) / 1024 }
    END   {
      if (c >= 1000) {
        printf "  %.2f GiB", c/1024
      } else {
        printf "  %4d MiB", c
      }
    }'
}

SOUND() {
  amixer get Master | awk '\
    BEGIN { sound=0; speaker=0; mute=""; }\

    match($0, /[[:digit:]]+%/) {\
      sound+=substr($0, RSTART, RLENGTH - 1);\
      speakers+=1;\
      if ($6 == "[off]") {\
        mute="";\
      }\
    }\

    END {if (speakers > 0) { printf "%s  %s", mute, sound/speakers; }}\
  '
}

BAT() {
  batindexfile="$DWM_CACHE_DIR"/bat_symbol
  [ ! -f "$batindexfile" ] && echo "0" > "$batindexfile"

  read batindex < "$batindexfile"
  echo $(( (batindex + 1) % batsymlen)) > "$batindexfile"

  for BAT_DIR in /sys/class/power_supply/BAT*;
  do
    batcapacity=$(<"$BAT_DIR"/capacity)
    case $(<"$BAT_DIR"/status) in
      Charging)     batstatus="${batsym[$batindex]}  ";;
      Discharging)  batstatus="${batsym[$(( batcapacity * batsymlen / 100 ))]}  ";;
      Full)         batstatus="${batsym[$(( batsymlen - 1))]}  ";;
      *)            batstatus="   "
    esac
    echo "$batstatus $batcapacity%  |  "
  done
}

DATE() {
  echo "$(date +'%a, %b %d %H:%M:%S')"
}

DISPLAY_BAR() {
  sound=$(SOUND)
  while true; do
    sleep 1 & wait $(
      xsetroot -name "  $(NETWORK)  |  $(CPU)  |  $(MEM)  |  $sound  |  $(BAT)$(DATE)"
    )
  done
}

DISPLAY_BAR
